/*
1). 同步回调:
  理解: 立即执行, 完全执行完了才结束, 不会放入回调队列中
  例子: 数组遍历相关的回调函数 / Promise的excutor函数
2). 异步回调:
  理解: 不会立即执行, 会放入回调队列中将来执行
  例子: 定时器回调 / ajax回调 / Promise的成功|失败的回调
*/

// 回调函数的分类
// 同步函数   立即执行，代码会完全执行完了才结束，不会放到队列中，当函数开始执行了，会等待当前函数执行完毕后，才去执行下一行代码
const arr = [1, 3, 4, 6, 8, 4, 2]
for (let i = 0; i < arr.length; i++) {
  console.log(arr[i])
}
console.log(arr)

//异步回调   不会立即执行 会放到队列中去执行，当函数开始执行时，并不会等待当前函数执行完毕才去执行下一行代码，而是直接去执行下一行代码
setTimeout(() => {
  console.log("setTimeout之后")
}, 1000)
console.log("setTimeout之前")
